/**
 * DO NOT EDIT THIS FILE DIRECTLY.
 * It's being generated from knime-com-shared (see template in exceptions.mustache)
 */

export const GATEWAY_EXCEPTIONS = [
  "ServiceCallException",
  "NetworkException",
  "NodeDescriptionNotAvailableException",
  "NodeNotFoundException",
  "NoSuchElementException",
  "NotASubWorkflowException",
  "InvalidRequestException",
  "OperationNotAllowedException",
  "CollisionException",
  "LoggedOutException",
] as const;

export type GatewayExceptions =
  (typeof GATEWAY_EXCEPTIONS)[number];

function isObject(e: unknown): e is Exclude<object, any[]> {
  return e !== null && typeof e === "object" && !Array.isArray(e);
}

export type GatewayProblemDescription = {
  code: string;
  title: string;
  canCopy: boolean;
  stackTrace?: string;
  details?: string[];

  // Optional properties coming from hub/server requests
  date?: string;
  status?: number;
  "x-request-id"?: string;
  "x-error-id"?: string;
};

export function isValidAPIError(
  data: unknown,
): data is GatewayProblemDescription {
  return (
    isObject(data) &&
    "code" in data &&
    typeof data.code === "string" &&
    "title" in data &&
    typeof data.title === "string"
  );
}

type ApiError<CODE extends GatewayExceptions> = {
  code: CODE;
} & GatewayProblemDescription;

export function matchesAPIErrorCode<CODE extends GatewayExceptions>(
  error: unknown,
  code: CODE,
): error is ApiError<CODE> {
  return isValidAPIError(error) && error.code === code;
}
