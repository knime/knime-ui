/**
 * DO NOT EDIT THIS FILE DIRECTLY.
 * It's being generated from knime-com-shared (see template in exceptions.mustache)
 */

export const KNOWN_EXECUTOR_EXCEPTIONS = [
  "ServiceCallException",
  "NetworkException",
  "NodeDescriptionNotAvailableException",
  "NodeNotFoundException",
  "NoSuchElementException",
  "NotASubWorkflowException",
  "InvalidRequestException",
  "OperationNotAllowedException",
  "CollisionException",
  "LoggedOutException",
] as const;

export type KnownExecutorExceptions =
  (typeof KNOWN_EXECUTOR_EXCEPTIONS)[number];

function isObject(e: unknown): e is Exclude<object, any[]> {
  return e !== null && typeof e === "object" && !Array.isArray(e);
}

const EXPECTED_EXCEPTION_CODE = -32600;
type ExpectedExceptionCode = typeof EXPECTED_EXCEPTION_CODE;
const UNEXPECTED_EXCEPTION_CODE = -32601;
type UnexpectedExceptionCode = typeof UNEXPECTED_EXCEPTION_CODE;

export type ApiErrorData = {
  code: string;
  title: string;
  canCopy: boolean;
  stackTrace?: string;
  details?: string[];

  // Optional properties coming from hub/server requests
  date?: string;
  status?: number;
  "x-request-id"?: string;
  "x-error-id"?: string;
};

type FormattedApiError = {
  code: ExpectedExceptionCode | UnexpectedExceptionCode;
  data: ApiErrorData;
};

export function isApiErrorData(data: unknown): data is ApiErrorData {
  return (
    isObject(data) &&
    "code" in data &&
    typeof data.code === "string" &&
    "title" in data &&
    typeof data.title === "string"
  );
}

export function isApiError(e: unknown): e is FormattedApiError {
  return (
    isObject(e) &&
    "code" in e &&
    typeof e.code === "number" &&
    [EXPECTED_EXCEPTION_CODE, UNEXPECTED_EXCEPTION_CODE].includes(e.code) &&
    "data" in e &&
    isApiErrorData(e.data)
  );
}

type ApiError<CODE extends KnownExecutorExceptions> = FormattedApiError & {
  code: ExpectedExceptionCode;
  data: { code: CODE };
};

export function isApiErrorType<CODE extends KnownExecutorExceptions>(
  e: unknown,
  code: CODE,
): e is ApiError<CODE> {
  return (
    isApiError(e) && e.code === EXPECTED_EXCEPTION_CODE && e.data.code === code
  );
}
